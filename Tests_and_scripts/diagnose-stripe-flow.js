// Script completo para diagnosticar el flujo de Stripe
// Ejecutar en la consola del navegador

async function diagnoseStripeFlow() {
  try {
    console.log('üîç DIAGN√ìSTICO COMPLETO DEL FLUJO DE STRIPE');
    console.log('==========================================');
    
    // Obtener el cliente de Supabase del contexto global
    const supabase = window.supabase;
    if (!supabase) {
      console.error('‚ùå No se encontr√≥ el cliente de Supabase');
      return;
    }

    // 1. Verificar autenticaci√≥n
    console.log('\n1Ô∏è‚É£ Verificando autenticaci√≥n...');
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.error('‚ùå Usuario no autenticado');
      console.log('üí° Inicia sesi√≥n primero');
      return;
    }
    console.log('‚úÖ Usuario autenticado:', user.id);

    // 2. Verificar planes de suscripci√≥n
    console.log('\n2Ô∏è‚É£ Verificando planes de suscripci√≥n...');
    const { data: plans, error: plansError } = await supabase
      .from('subscription_plans')
      .select('*')
      .order('sort_order');

    if (plansError) {
      console.error('‚ùå Error al consultar planes:', plansError);
      return;
    }

    console.log('üìã Planes encontrados:');
    plans.forEach(plan => {
      console.log(`   ${plan.display_name}: ${plan.stripe_price_id || '‚ùå NO CONFIGURADO'}`);
    });

    // 3. Verificar suscripci√≥n actual
    console.log('\n3Ô∏è‚É£ Verificando suscripci√≥n actual...');
    const { data: currentSubscription, error: subError } = await supabase
      .from('user_subscriptions')
      .select(`
        *,
        subscription_plans (*)
      `)
      .eq('user_id', user.id)
      .eq('status', 'active')
      .single();

    if (subError && subError.code !== 'PGRST116') {
      console.error('‚ùå Error al consultar suscripci√≥n:', subError);
    } else if (currentSubscription) {
      console.log('‚úÖ Suscripci√≥n activa:', currentSubscription.subscription_plans.display_name);
    } else {
      console.log('‚ÑπÔ∏è No hay suscripci√≥n activa');
    }

    // 4. Probar funci√≥n stripe-checkout
    console.log('\n4Ô∏è‚É£ Probando funci√≥n stripe-checkout...');
    
    // Buscar un plan premium v√°lido
    const premiumPlan = plans.find(p => p.name === 'premium_monthly' && p.stripe_price_id);
    
    if (!premiumPlan) {
      console.error('‚ùå No se encontr√≥ un plan premium con price ID v√°lido');
      console.log('üí° Actualiza los price IDs en la base de datos');
      return;
    }

    console.log('üîÑ Llamando a funci√≥n stripe-checkout con price ID:', premiumPlan.stripe_price_id);
    
    const { data: checkoutData, error: checkoutError } = await supabase.functions.invoke('stripe-checkout', {
      body: {
        priceId: premiumPlan.stripe_price_id,
        userId: user.id,
        successUrl: `${window.location.origin}/profile?success=true`,
        cancelUrl: `${window.location.origin}/pricing?canceled=true`
      }
    });

    console.log('üì§ Respuesta de stripe-checkout:');
    console.log('   Data:', checkoutData);
    console.log('   Error:', checkoutError);

    if (checkoutError) {
      console.error('‚ùå Error en stripe-checkout:', checkoutError);
    } else if (checkoutData?.url) {
      console.log('‚úÖ URL de checkout recibida:', checkoutData.url);
      console.log('üîÑ ¬øQuieres abrir el checkout de Stripe? (ejecuta: window.open(checkoutData.url, "_blank"))');
    } else {
      console.error('‚ùå No se recibi√≥ URL de checkout');
    }

    // 5. Resumen del diagn√≥stico
    console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO');
    console.log('==========================');
    console.log('‚úÖ Usuario autenticado');
    console.log(`‚úÖ ${plans.length} planes configurados`);
    console.log(`‚úÖ ${plans.filter(p => p.stripe_price_id).length} planes con price ID`);
    console.log(checkoutError ? '‚ùå Error en stripe-checkout' : '‚úÖ stripe-checkout funcionando');

    return {
      user,
      plans,
      currentSubscription,
      checkoutData,
      checkoutError
    };

  } catch (err) {
    console.error('‚ùå Error en el diagn√≥stico:', err);
  }
}

// Hacer la funci√≥n disponible globalmente
window.diagnoseStripeFlow = diagnoseStripeFlow;

console.log('‚úÖ Script de diagn√≥stico cargado. Ejecuta diagnoseStripeFlow() en la consola para diagnosticar todo el flujo.'); 